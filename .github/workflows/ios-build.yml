name: iOS Build and Test

on:
  push:
    branches: [ mobile/ios-scaffold, main ]
    paths:
      - 'mobile/ios/**'
      - '.github/workflows/ios-build.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'mobile/ios/**'
      - '.github/workflows/ios-build.yml'

env:
  XCODE_VERSION: '15.0'
  IOS_SIMULATOR_DEVICE: 'iPhone 15'
  IOS_SIMULATOR_OS: '17.0'  # iOS 16+ compatible
  
jobs:
  build-and-test:
    name: Build and Test iOS App
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
        
    - name: Show Xcode version
      run: xcodebuild -version
      
    - name: Show available simulators
      run: xcrun simctl list devices available
      
    - name: Cache Derived Data
      uses: actions/cache@v3
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-derived-data-${{ hashFiles('mobile/ios/ScribeCat-iOS.xcodeproj/**') }}
        restore-keys: |
          ${{ runner.os }}-derived-data-
          
    - name: Install dependencies (if using CocoaPods)
      working-directory: mobile/ios
      run: |
        if [ -f "Podfile" ]; then
          echo "Installing CocoaPods dependencies..."
          pod install --repo-update
        else
          echo "No Podfile found, skipping CocoaPods installation"
        fi
        
    - name: Build iOS app for simulator
      working-directory: mobile/ios
      run: |
        xcodebuild clean build \
          -project ScribeCat-iOS.xcodeproj \
          -scheme ScribeCat-iOS \
          -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR_DEVICE }},OS=${{ env.IOS_SIMULATOR_OS }}" \
          -configuration Debug \
          CODE_SIGNING_ALLOWED=NO \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE=""
          
    - name: Run unit tests
      working-directory: mobile/ios
      run: |
        xcodebuild test \
          -project ScribeCat-iOS.xcodeproj \
          -scheme ScribeCat-iOS \
          -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR_DEVICE }},OS=${{ env.IOS_SIMULATOR_OS }}" \
          -configuration Debug \
          CODE_SIGNING_ALLOWED=NO \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE="" \
          -resultBundlePath TestResults.xcresult
          
    - name: Parse test results
      if: always()
      working-directory: mobile/ios
      run: |
        if [ -d "TestResults.xcresult" ]; then
          xcrun xcresulttool get --format json --path TestResults.xcresult > test_results.json
          echo "Test results saved to test_results.json"
          
          # Extract basic test statistics
          TESTS_PASSED=$(xcrun xcresulttool get --format json --path TestResults.xcresult | jq '.actions[0].actionResult.testsRef.id.value' | wc -l)
          echo "Tests completed: $TESTS_PASSED"
        else
          echo "No test results found"
        fi
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: ios-test-results
        path: mobile/ios/TestResults.xcresult
        retention-days: 30
        
    - name: Upload build logs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: ios-build-logs
        path: |
          ~/Library/Developer/Xcode/DerivedData/**/Logs/**
        retention-days: 7

  # Conditional job for TestFlight deployment (requires secrets)
  deploy-testflight:
    name: Deploy to TestFlight
    runs-on: macos-14
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
        
    - name: Install Fastlane
      run: |
        gem install fastlane
        
    - name: Setup Fastlane environment
      working-directory: mobile/ios
      env:
        FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
        FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
        FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
        FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      run: |
        if [ -z "$FASTLANE_USER" ]; then
          echo "‚ö†Ô∏è FASTLANE_USER secret not set - skipping TestFlight deployment"
          echo "To enable TestFlight deployment, set the following secrets in GitHub:"
          echo "- FASTLANE_USER (Apple ID)"
          echo "- FASTLANE_PASSWORD (Apple ID password)"
          echo "- FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD"
          echo "- FASTLANE_SESSION (optional, for 2FA)"
          echo "- MATCH_PASSWORD (for certificate management)"
          exit 0
        fi
        
        echo "Running Fastlane TestFlight deployment..."
        fastlane ios beta
        
  # Optional: Build size analysis
  analyze-build:
    name: Analyze Build Size
    runs-on: macos-14
    needs: build-and-test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
        
    - name: Build for archive analysis
      working-directory: mobile/ios
      run: |
        xcodebuild archive \
          -project ScribeCat-iOS.xcodeproj \
          -scheme ScribeCat-iOS \
          -destination "generic/platform=iOS" \
          -archivePath build/ScribeCat-iOS.xcarchive \
          -configuration Release \
          CODE_SIGNING_ALLOWED=NO \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE=""
          
    - name: Analyze build size
      working-directory: mobile/ios
      run: |
        if [ -d "build/ScribeCat-iOS.xcarchive" ]; then
          APP_SIZE=$(du -sh build/ScribeCat-iOS.xcarchive/Products/Applications/ScribeCat-iOS.app | cut -f1)
          echo "üì± App bundle size: $APP_SIZE"
          
          # Create a comment for the PR
          echo "## üìä Build Analysis" > build_analysis.md
          echo "" >> build_analysis.md
          echo "**App Bundle Size:** $APP_SIZE" >> build_analysis.md
          echo "" >> build_analysis.md
          echo "_Generated by iOS Build workflow_" >> build_analysis.md
        else
          echo "‚ùå Archive not found for size analysis"
        fi
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = 'mobile/ios/build_analysis.md';
          if (fs.existsSync(path)) {
            const body = fs.readFileSync(path, 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }